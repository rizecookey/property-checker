plugins {
    id 'java'
    id 'maven-publish'
    id 'eclipse'
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}


repositories {
    mavenLocal()
    mavenCentral()
}

ext.versions = [
        checkerFramework: "3.42.0-eisop3",
]

sourceCompatibility = 21

// TODO: use annotated JDK for artifact/tests
dependencies {
    implementation "org.checkerframework:dataflow"
    implementation "org.checkerframework:checker"

    implementation "com.google.guava:guava:30.1-jre"
    implementation "org.apache.commons:commons-lang3:3.11"
    implementation "org.apache.commons:commons-io:1.3.2"
    implementation 'org.plumelib:plume-util:1.8.1'
    implementation 'org.sosy-lab:java-smt:5.0.1'

    // Testing
    testImplementation 'junit:junit:4.13'
    testImplementation "org.checkerframework:framework-test"
}

def javaModuleOpts = [
        // These are required in Java 16+ because the --illegal-access option is set to deny
        // by default.  None of these packages are accessed via reflection, so the module
        // only needs to be exported, but not opened.
        '--add-exports',
        'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
        '--add-exports',
        'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
        '--add-exports',
        'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
        '--add-exports',
        'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
        '--add-exports',
        'jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
        '--add-exports',
        'jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
        '--add-exports',
        'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '--add-exports',
        'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
        // Required because the Checker Framework reflectively accesses private members in com.sun.tools.javac.comp.
        '--add-opens',
        'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
]

tasks.withType(JavaCompile).all {
    options.compilerArgs.add("-Xlint:all")
    options.compilerArgs.add('-proc:none')
    options.compilerArgs += javaModuleOpts
}

// Add `mavenLocal()` in `repositories`, then run `./gradlew publishToMavenLocal`
// to publish your checker to your local Maven repository.
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'edu.kit.kastel'
            artifactId = 'property-checker'
            version = '2.0.0'

            from components.java
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes("Main-Class": "org.checkerframework.framework.util.CheckerMain")
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    destinationDirectory = file("$rootDir")
}

test {
    maxHeapSize = "4096m"
    //jvmArgs "-XX:MaxPermSize=256m"

    inputs.files("tests/property")

    systemProperty 'translationOnly', System.getProperty('translationOnly')
    systemProperty 'emit.test.debug', true

    jvmArgs += javaModuleOpts
    testLogging.showStandardStreams = true
}

clean.doFirst {
    delete "${rootDir}/tests/build/"
    delete "${rootDir}/../property-checker-out/"
    delete "${rootDir}/../flowdot/"
}

task printClasspath {
    description 'Prints the runtime classpath of the checker. When using the checker to typecheck' +
            'another project, you should put the result of running this task on either the processor' +
            'path or the classpath of the target project.'
    doLast {
        println sourceSets.main.runtimeClasspath.asPath
    }
}
